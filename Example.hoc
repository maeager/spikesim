create acell_home_
access acell_home_
load_file("netparmpi.hoc")
objref pnm, nil, mitgid, grangid
pnm = new ParallelNetManager(0)

proc netpar_mkpnm() {local ncell
	mitgid = new Matrix(nmitx, nmity)
	grangid = new Matrix(ngranx, ngrany)
	ncell = nmitx*nmity + ngranx*ngrany
	pnm.ncell = ncell
	print "ncell=",ncell
	pnm.round_robin()
	gidcnt=0
}

obfunc netpar_create() {localobj cell
	cell = pnm.create_cell(gidcnt, $s1)
	$o2.x[$3][$4] = gidcnt
	gidcnt += 1
	return cell
}

func netpar_connect() { local i
	i = pnm.nc_append($o1.x[$2][$3], $o4.x[$5][$6], $7,  $9, $8)
	return i
}

proc netpar_weight() {
	if ($o1.x[$2] != -1) {
		pnm.nclist.object($o1.x[$2]).weight = $3
	}
}

proc netpar_delay() {
	if ($o1.x[$2] != -1) {
		pnm.nclist.object($o1.x[$2]).delay = $3
	}
}


// parameters_ddi_baseline.hoc
// Olfactory bulb network model: parameters file
//   for dendrodendritic inhibition.
// Andrew Davison, The Babraham Institute, 2000.

nmitx       = 5			// 1st dimension of mitral cell array
nmity       = 5			// 2nd dimension of mitral cell array
nglom       = nmitx*nmity	// total number of mitral cells
g2m         = 10		// 
ngranx      = nmitx*g2m		// 1st dimension of granule cell array
ngrany      = nmity*g2m		// 2nd dimension of granule cell array
mitsep      = 1.0		// um	// mitral cell separation
gransep     = mitsep/g2m	// granule cell separation
seed        = 0			// seed for random number generator
rmax        = ngranx*0.5	// maximum range of synaptic connections
synpermit   = 200		// synapses per mitral cell
thresh      = -10       // mV	// threshold for detecting spikes
edelay      = 1.8       // ms	// time delay of mitral->granule synapses
conducdel   = 0		// ms	// conduction delay in secondary dendrites
idelay      = 0.6       // ms	// time delat of granule->mitral synapses
AMPAweight  = 1e-3	// uS	// }
NMDAweight  = 7e-4	// uS	// } synaptic conductances
iweight     = 6e-4	// uS	// }
maxinput    = 1.0	// nA	// measure of `odour intensity'
nof         = 10        	// number of `odour features'
diffglom    = 0			// } 0 - cells are in the same glomerulus
				// } 1 - cells are in different glomeruli
NMDArisetime = 30	// ms	// rise-time of NMDA conductance
NMDAdecay    = 343      // ms   // NMDA decay time constant
NMDArise     = 52       // ms   // NMDA rise time constant
mgconc 	    = 0		// mM	// external magnesium ion concentration
strdef fileroot
sprint(fileroot,"ddi_baseline")	// root for output filenames
odournumber = 1			// odour file
inputnumber = 1			// fixed input file
tstop	    = 1500	// ms	// total simulation time
ttrans	    = 0		// ms   // when calculating statistics, ignore
				// spikes occuring before this time
cvode.active(0)
dt 	    = 0.05	//ms

//  Initialisation

objref cvode, random
cvode = new CVode(0)    // start with CVode inactive
random = new Random(seed)
random.MCellRan4(seed+1)
objref mit[nmitx][nmity], gran[ngranx][ngrany]
objref m2gAMPAvec, m2gNMDAvec, g2mvec

m2gAMPAvec = new Vector() // indices into pnm.nclist, most often -1
m2gNMDAvec = new Vector()
g2mvec = new Vector()
objref input[nmitx][nmity]
objref outfile
outfile = new File()
strdef filename
// Create cells --------------------------------------------------------

proc create_cells() { local i,j,p
  netpar_mkpnm()
  quitmodel = 0
if (pnm.myid == 0)  print "Creating cells. This may take some time."
  for i = 0, nmitx-1 {
    for j = 0, nmity-1 {
      mit[i][j] = netpar_create("new Mit()", mitgid, i, j)
    }
}


proc connect_cells() { local i,j,phi,r,ii,jj,dg,edel // 2 args - dg, fileroot
  dg = $1   // "different glomeruli"
if (pnm.myid == 0) print "Connecting cells"
  m2gAMPAvec.resize(0)
  m2gNMDAvec.resize(0)
  g2mvec.resize(0)
  sprint(filename,"%s.connect",$s2)
if (pnm.myid == 0)  outfile.wopen(filename)
  // Note: here it is possible for a mitral cell to have more than one
  // synaptic contact with any particular granule cell.
  for i = 0, nmitx-1 {
    for j = 0, nmity-1 {
      for k = 1, synpermit {
        phi = random.uniform(0,2*PI)
        r = random.uniform(0,rmax)
        x = dg*i*g2m + r*sin(phi)
        y = dg*j*g2m + r*cos(phi)
        ii = wrap( nint(x),ngranx )
        jj = wrap( nint(y),ngrany )
 if (pnm.myid == 0)       outfile.printf("%d %d\n%5.1f %5.1f %d %d\n\n",dg*i*g2m,dg*j*g2m,x,y,ii,jj)
        //print "Mitral cell [",i,",",j,"] connected to granule cell [",ii,",",jj,"]. "
        edel = edelay + r/rmax*conducdel
//        mit[i][j].dend m2gAMPAlist.append( new NetCon(&v(0.5),gran[ii][jj].AMPAr,thresh,edel,AMPAweight) )
//        mit[i][j].dend m2gNMDAlist.append( new NetCon(&v(0.5),gran[ii][jj].NMDAr,thresh,edel,NMDAweight) )
//        gran[ii][jj].periph g2mlist.append( new NetCon(&v(0.5),mit[i][j].GABAA,thresh,idelay,iweight) )

	m2gAMPAvec.append(netpar_connect(mitgid, i, j, grangid, ii, jj, 0, edel, AMPAweight))
	m2gNMDAvec.append(netpar_connect(mitgid, i, j, grangid, ii, jj, 1, edel, NMDAweight))
	g2mvec.append(netpar_connect(grangid, ii, jj, mitgid, i, j, 1, idelay, iweight))
      }
    }
  }
if (pnm.myid == 0)  outfile.close()
}


proc randomise_NMDA() { local i // 2 args - mean weight, variance
//  m2gNMDAlist.object(0).weight = random.normal($1,$2)
  netpar_weight(m2gNMDAvec, 0, random.normal($1,$2))
  //m2gNMDAlist.object(0).weight = random.poisson($1)
  for i = 1,m2gNMDAvec.size()-1 {
//    m2gNMDAlist.object(i).weight = random.repick()
	netpar_weight(m2gNMDAvec, i, random.repick())
  }
}

proc insert_iclamps() { local i,j, ran // 2 args - del dur
  // if $1 is negative, delay is randomly chosen in the uniform interval 0,$1
  for i = 0, nmitx-1 {
    for j = 0, nmity-1 {
	if (pnm.gid_exists(mitgid.x[i][j])) {
      mit[i][j].glom input[i][j] = new IClamp(0.5)
      input[i][j].dur = $2
      input[i][j].del = abs($1)
	}
    }
  }
  random.uniform(0,abs($1))
  if ($1 < 0) {
    for i = 0, nmitx-1 {
      for j = 0, nmity-1 {
         ran = random.repick()
	if (pnm.gid_exists(mitgid.x[i][j])) {
         input[i][j].del = ran
	}
      }
    }
  }
}

// Randomise initial conditions ----------------------------------------

proc random_init() { local i,j, ran
  random.normal(-65,25)
  for i = 0,nmitx-1 {
    for j = 0, nmity-1 {
      ran = random.repick()
	if (pnm.gid_exists(mitgid.x[i][j])) {
      mit[i][j].soma.v(0.5) = ran
      mit[i][j].dend.v(0.5) = mit[i][j].soma.v(0.5)
      mit[i][j].prim.v(0.5) = mit[i][j].soma.v(0.5)
      mit[i][j].glom.v(0.5) = mit[i][j].soma.v(0.5)
	}
    }
  }
  for i = 0,ngranx-1 {
    for j = 0, ngrany-1 {
      ran = random.repick()
	if (pnm.gid_exists(grangid.x[i][j])) {
      gran[i][j].soma.v(0.5) = ran
      gran[i][j].deep.v(0.5) = gran[i][j].soma.v(0.5)
      gran[i][j].periph.v(0.5) = gran[i][j].soma.v(0.5)
	}
    }
  }
}


// �� Create the model �������������������������������������������������

create_cells()
connect_cells(diffglom,fileroot)
insert_iclamps(-200,tstop)
inputarray = new Matrix(nmitx,nmity)


proc add_uniform_input() { local i,j // 2 args - min and max input
  for i = 0, nmitx-1 {
    for j = 0, nmity-1 {
      inputarray.x[i][j] += random.uniform($1,$2)
	if (input[i][j] != nil) {
      input[i][j].amp = inputarray.x[i][j]
	}
    }
  }
}


proc add_focal_input() {  // 4 args - max input, centre coords and half-width of spot
  for i = 0, nmitx-1 {
    for j = 0, nmity-1 {
      inputarray.x[i][j] += $1*exp(-2.77259*((i-$3)*(i-$3)+(j-$2)*(j-$2))/($2*$2))
	if (input[i][j] != nil) {
      input[i][j].amp = inputarray.x[i][j]
      //print i,j,input[i][j].amp
	}
    }
  }
}


proc generate_odour_matrix() { local i,j,r,ix,iy,k,l,min,max
  A = new Matrix(nglom,nof) 	// A is set here and should
                		// not be changed elsewhere
  S = new Matrix(nmitx,nmity)   // X and S are local
  X = new Vector(nglom)     	// matrices

  r = random.normal(0.0,0.5)

  // Generate original matrix
  for i = 0,nglom-1 for j = 0,nof-1 {
    r = random.repick()
    if (r < 0) {r = 0}
    A.x[i][j] = r
  }

  // Average to obtain similar responses of nearby glomeruli
  blur = 2

  for j = 0,nof-1 {
    X = A.getcol(j)
    for ix = 0,nmitx-1 for iy = 0,nmity-1 {
      S.x[ix][iy] = X.x[ix*nmity+iy]
    }
    for ix = 0,nmitx-1 for iy = 0,nmity-1 {
      X.x[ix*nmity+iy] = 0
      for k = -1,1 for l = -1,1 {
        kx = mod(ix+k,nmitx)
        ly = mod(iy+l,nmity)
        X.x[ix*nmity+iy] += ( S.x[kx][ly] * exp(-blur*sqrt(k^2+l^2)) )
      }
    }
    A.setcol(j,X)
  }

  max = arraymax(A)
  min = arraymin(A)
  print "min, max ",min,max
  for i=0,nglom-1 for j=0,nof-1 {
    A.x[i][j] += -min
  }
  A.muls(1/(max-min))
}


proc read_odour_file() {
  sprint(odourfile,"odour%d",$1)
  ropen(odourfile)
  for i = 0,nof-1 {
    odour.x[i] = fscan()
  }
  ropen()
  printf("Odour %d loaded:\n",$1)
  odour.printf("%6.3f")
}

proc map_odour_to_input() { local i,j // 2 args - odour vector and odour intensity
  X = A.mulv($o1)
  for i = 0, nmitx-1 {
    for j = 0, nmity-1 {
      inputarray.x[i][j] += $2 * X.x[i*nmity+j]
      input[i][j].amp = inputarray.x[i][j]
    }
  }
}

proc add_odour_input() { // 2 args - odour number and input intensity
  generate_odour_matrix()
  read_odour_file($1)
  map_odour_to_input(odour,$2)
}

proc add_fixed_input() { local i,j // 2 args - input vector and input intensity
  sprint(inputfile,"input%d",$1)
  ropen(inputfile)
  for i = 0, nmitx-1 {
    for j = 0, nmity-1 {
      inputarray.x[i][j] = fscan()
      input[i][j].amp = $2*inputarray.x[i][j]
    }
  }
  ropen()
  printf("Input %d loaded:\n",$1)
  inputarray.printf("%6.3f")
}

proc glomshock() { local i,j // 3 args - amplitude, delay and duration
  for i = 0, nmitx-1 {
    for j = 0, nmity-1 {
	if (pnm.gid_exists(mitgid.x[i][j])) {
      inputarray.x[i][j] = $1
      input[i][j].amp = inputarray.x[i][j]
      input[i][j].del = $2
      input[i][j].dur = $3
	}
    }
  }
}


// *** Set inputs and connections
set_no_input()
glomshock(20,2,5)
randomise_NMDA(NMDAweight,(0.5*NMDAweight)^2)

// *** Set-up recording
objref igabaa, tvec, vgran, vmit, iclamp
record_step = 0.1
record_vec_size = int(tstop/record_step)+1
igabaa = new Vector(record_vec_size)
tvec = new Vector(record_vec_size)
vgran = new Vector(record_vec_size)
vmit = new Vector(record_vec_size)
iclamp = new Vector(record_vec_size)
record_step = 0.1
if (pnm.gid_exists(mitgid.x[3][3])) igabaa.record(&mit[3][3].GABAA.i,record_step)
if (pnm.myid == 0) tvec.record(&t,record_step)
if (pnm.gid_exists(grangid.x[0][6])) vgran.record(&gran[0][6].periph.v(0.5),record_step)
if (pnm.gid_exists(mitgid.x[0][0])) vmit.record(&mit[0][0].dend.v(0.5),record_step)
if (pnm.gid_exists(mitgid.x[3][3])) iclamp.record(&vclamp.i,record_step)

proc post_record() {
	if (pnm.gid_exists(mitgid.x[3][3])) pnm.pc.post("igabaa", igabaa)
	if (pnm.gid_exists(grangid.x[0][6])) pnm.pc.post("vgran", vgran)
	if (pnm.gid_exists(mitgid.x[0][0])) pnm.pc.post("vmit", vmit)
	if (pnm.gid_exists(mitgid.x[3][3])) pnm.pc.post("iclamp", iclamp)
}
proc take_record() {
	pnm.pc.context("post_record()")
	if (!pnm.pc.gid_exists(mitgid.x[3][3])) pnm.pc.take("igabaa", igabaa)
	if (!pnm.pc.gid_exists(grangid.x[0][6])) pnm.pc.take("vgran", vgran)
	if (!pnm.pc.gid_exists(mitgid.x[0][0])) pnm.pc.take("vmit", vmit)
	if (!pnm.pc.gid_exists(mitgid.x[3][3])) pnm.pc.take("iclamp", iclamp)
}


/ *** Process data and print out results
xopen("par_calcisilag.hoc") // everybody needs this for the post_results

proc print_results() {
  print_raster(fileroot)
  print_gran_raster(fileroot)
  print_gran_hist(1,fileroot)
  sprint(filename,"%s.curvs",fileroot)
  outfile.wopen(filename)
  take_record()
  for i = 0, tvec.size()-1 {
    outfile.printf("%8.3g %8.3g %8.3g %8.3g %8.3g \n",tvec.x[i],igabaa.x[i],vmit.x[i],vgran.x[i],iclamp.x[i])
  }
  outfile.close()
  print "Results printed to files"
}

xopen("ddi_baseline.ses")


//tstop = 100
pnm.want_all_spikes()
pnm.set_maxstep(100)

objref mxhist
if (pnm.myid == 0) {
	mxhist = new Vector(25)
	pnm.pc.max_histogram(mxhist)
}

proc prun() {
        pnm.set_maxstep(10)
        runtime=startsw()
        waittime = pnm.pc.wait_time
        stdinit()
        pnm.psolve(tstop)
        waittime = pnm.pc.wait_time - waittime
        runtime = startsw() - runtime
	steptime = pnm.pc.step_time
	sendtime = pnm.pc.send_time	
//        printf("%d wtime %g\n", pnm.myid, waittime)
}

proc poststat() {
	pnm.pc.post("poststat", pnm.myid, steptime, sendtime, waittime)
}

proc getstat() {local i, id
	idmax = 0
	waitmax = waittime
	stepmax = steptime
	sendmax = sendtime
	idmin = 0
	waitmin = waittime
	stepmin = steptime
	sendmin = sendtime
	if (pnm.nwork > 1) {
		pnm.pc.context("poststat()\n")
		for i=0, pnm.nwork-2 {
			pnm.pc.take("poststat", &id, &steptime, &sendtime, &waittime)
			if (waittime > waitmax) {
				idmax = id
				waitmax = waittime
				stepmax = steptime
				sendmax = sendtime
			}
			if (waittime < waitmin) {
				idmin = id
				waitmin = waittime
				stepmin = steptime
				sendmin = sendtime
			}
		}
	}
}

proc perf2file() { localobj perf
	perf = new File()
	perf.aopen("perf.dat")
	perf.printf("%d %g %g %g    %d %g %g %g    %d %g %g %g\n", \
		pnm.nhost, tstop, setuptime, runtime,\
		idmax, waitmax, stepmax, sendmax, \
		idmin, waitmin, stepmin, sendmin)
	perf.close
}

proc spike2file() { localobj outf
	outf = new File()
	outf.wopen("out.dat")
	for i=0, pnm.idvec.size-1 {
		outf.printf("%g\t%d\n", pnm.spikevec.x[i], pnm.idvec.x[i])
	}
	outf.close
}



prun()
pnm.pc.runworker

print_results()

pnm.prstat(1)
pnm.gatherspikes()
getstat()
pnm.pc.done


spike2file()
perf2file()

for i=0, mxhist.size-1 {
	printf("%d\t %d\n", i, mxhist.x[i])
}

printf("setuptime=%g   runtime=%g\n", setuptime, runtime)
quit()


